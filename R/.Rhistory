"vbt_smoker" = "smoker",
"vbt_gender" = "sex",
"Issue_Age" = "issue_age",
"Attained_Age" = "attained_age"
)) %>%
# group within each vbt table / experience & calendar year
group_by(
vbt_table_version,
vbt_alb_anb,
vbt_smoker,
vbt_gender,
tbl_name,
Calendar_Year,
Smoker_Status,
Gender,
Preferred_Class
) %>%
# compute the poisson log likelihood
mutate(
exp_claims = qx * Policies_Exposed,
log_likelihood = dpois(Number_Of_Deaths, exp_claims, log=T)
) %>%
summarise(
ll = sum(log_likelihood),
total_claims = sum(Number_Of_Deaths),
exp_claims = sum(exp_claims),
ae = total_claims / exp_claims,
.groups = "drop"
)
})
# check that we haven't duplicated any claims
likelihood_calc %>%
group_by(
Gender,
Smoker_Status,
Preferred_Class,
vbt_table_version,
vbt_alb_anb,
tbl_name) %>%
summarise(
total_claims = sum(total_claims),
.groups="drop"
) %>%
head(1) %>%
t() %>%
as.data.frame() %>%
rownames_to_column() %>%
select(
Field = rowname,
Value = V1
) %>%
kable(caption = "Spot-check for duplicates") %>%
kable_styling()
# create a list of the years in the training set
holdout_years <- perm_experience.train %>%
select(Calendar_Year) %>%
distinct() %>%
collect() %>%
arrange(Calendar_Year) %>%
pull(Calendar_Year)
# keep the overall A/E of the holdout year (across all sex / smokers)
# in a vector to estimate the out-of-sample error later
holdout_years_ae <- c()
# this will hold the results of the join
all_vbt_rankings <- NULL
# run the cross-validation like procedure
for (holdout_yr in holdout_years) {
# compute the log-likelihood for each cell after
# holding out a single calendar year
vbt_rankings <- likelihood_calc %>%
filter(Calendar_Year != !!holdout_yr) %>%
group_by(
vbt_table_version,
vbt_alb_anb,
vbt_smoker,
vbt_gender,
tbl_name,
Smoker_Status,
Gender,
Preferred_Class
) %>%
summarise(
ll = sum(ll),
.groups="drop"
) %>%
group_by(
Smoker_Status,
Gender,
Preferred_Class
) %>%
mutate(
rank = row_number(desc(ll))
) %>%
arrange(rank)
# find the best table (maximum likelihood)
best_table <- vbt_rankings %>%
filter(rank == 1)
# compute the actual-to-expected on the holdout set
holdout_ae <- likelihood_calc %>%
filter(Calendar_Year == holdout_yr) %>%
inner_join(best_table %>%
select(-c(ll:rank)), by=c(
"vbt_table_version",
"vbt_alb_anb",
"vbt_smoker",
"vbt_gender",
"tbl_name",
"Smoker_Status",
"Gender",
"Preferred_Class"
)) %>%
group_by(1) %>%
summarise(
total_claims = sum(total_claims),
exp_claims = sum(exp_claims),
ae = total_claims / exp_claims,
.groups="drop"
) %>%
pull(ae)
# keep the A/E in the holdout year for the final plot
holdout_years_ae <- c(
holdout_years_ae,
holdout_ae
)
# append the record of the best tables
if (is.null(all_vbt_rankings)) {
all_vbt_rankings <- best_table
} else {
all_vbt_rankings <- rbind(
all_vbt_rankings,
best_table
)
}
}
rm(best_table)
plot_data <- tibble(
`Holdout Year` = holdout_years,
`A/E` = holdout_years_ae
)
ggplot(plot_data, aes(x=`Holdout Year`, y=`A/E`)) +
geom_line() +
scale_y_continuous(
trans=scales::pseudo_log_trans(),
labels = scales::percent_format()) +
theme_minimal() +
ylab("Actual-to-Expected") +
ggtitle(sprintf("Holdout Year A/E (%.1f%% average)", 100*mean(holdout_years_ae)),
"Expected = Maximum Likelihood VBT Table") +
geom_hline(yintercept = 1, color="red")
plot_data <- all_vbt_rankings %>%
mutate(
tbl_name = paste0(vbt_table_version, " ", vbt_alb_anb, " ", tbl_name),
cell_name = interaction(Smoker_Status, Gender, Preferred_Class)
)
suppressWarnings({
ggplot(plot_data, aes(x=tbl_name)) +
geom_histogram(stat="count") +
facet_wrap(~ cell_name, scales="free", ncol=2) +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)
) +
coord_flip() +
theme_minimal() +
xlab("VBT Table") +
ylab("Number of Maximum Likelihood Votes") +
ggtitle("Results of maximum likelihood cross-validation")
})
best_vbt_table <- all_vbt_rankings %>%
group_by(vbt_table_version, vbt_smoker, vbt_gender, vbt_alb_anb,
tbl_name, Smoker_Status, Gender, Preferred_Class) %>%
summarise(
tbl_count = n()
) %>%
group_by(
Smoker_Status, Gender, Preferred_Class
) %>%
arrange(desc(tbl_count)) %>%
mutate(
most_common = row_number()
) %>%
filter(most_common == 1) %>%
select(-tbl_count, -most_common)
best_vbt_table %>%
mutate(
`Best Table` = paste0(
vbt_table_version, " ", vbt_alb_anb,
" ", tbl_name
)
) %>%
select(Gender, Smoker_Status, Preferred_Class, `Best Table`) %>%
arrange(Gender, Smoker_Status, Preferred_Class) %>%
kable(caption="Final Table Selection") %>%
kable_styling()
prepare_modeling_data <- function(df, table_mapping) {
df %>%
# connect the experience with the join table
inner_join(
best_vbt_table,
by=c("Smoker_Status", "Gender", "Preferred_Class")
) %>%
inner_join(
vbt_tables,
by=c("vbt_table_version"="table_version",
"vbt_smoker"="smoker",
"vbt_gender"="sex",
"vbt_alb_anb"="alb_anb",
"tbl_name"="tbl_name",
"Issue_Age"="issue_age",
"Attained_Age"="attained_age")) %>%
mutate(
Face_Amount_Band = stringr::str_trim(Face_Amount_Band),
Face_Amount = case_when(
Face_Amount_Band == "1-9999" ~ 5000,
Face_Amount_Band == "10000-24999" ~ 17500,
Face_Amount_Band == "25000-49999" ~ 37500,
Face_Amount_Band == "50000-99999" ~ 75000,
Face_Amount_Band == "100000-249999" ~ 175000,
Face_Amount_Band == "250000-499999" ~ 375000,
Face_Amount_Band == "500000-999999" ~ 750000,
Face_Amount_Band == "1000000-2499999" ~ 1750000,
Face_Amount_Band == "2500000-4999999" ~ 3750000,
Face_Amount_Band == "5000000-9999999" ~ 7500000,
Face_Amount_Band == "10000000+" ~ 15000000),
Face_Amount_Band = factor(Face_Amount_Band,
levels = c(
"1-9999",
"10000-24999",
"25000-49999",
"50000-99999",
"100000-249999",
"250000-499999",
"500000-999999",
"1000000-2499999",
"2500000-4999999",
"5000000-9999999",
"10000000+"
), ordered = T),
Face_Amount_Band_2 = forcats::fct_collapse(
Face_Amount_Band,
`<50K` = c("1-9999", "10000-24999", "25000-49999"),
other_level = "50K+"
),
Face_Amount_Band_Int = as.integer(Face_Amount_Band),
Expected_Deaths = Policies_Exposed * qx)
}
model_data.train <- perm_experience.train %>%
prepare_modeling_data(best_vbt_table)
model_data.test <- perm_experience.test %>%
prepare_modeling_data(best_vbt_table)
tibble(
Dataset = c("model_data.train", "model_data.test", "perm_experience"),
`Number of Deaths` = c(
sum(model_data.train$Number_Of_Deaths),
sum(model_data.test$Number_Of_Deaths),
sum(perm_experience$Number_Of_Deaths)
),
`Expected Number of Deaths (Best VBT Table)` = c(
round(sum(model_data.train$Expected_Deaths), 0),
round(sum(model_data.test$Expected_Deaths), 0),
NA
),
`Number of Exposures` = c(
round(sum(model_data.train$Policies_Exposed), 0),
round(sum(model_data.test$Policies_Exposed), 0),
round(sum(perm_experience$Policies_Exposed), 0)
)
) %>%
kable(caption="check modeling data frame") %>%
kable_styling()
plot_data <- model_data.train %>%
mutate(
cohort_name = interaction(
Gender,
Smoker_Status,
Preferred_Class,
vbt_alb_anb)
) %>%
group_by(
tbl_name,
cohort_name,
Attained_Age,
vbt_alb_anb
) %>%
summarise(
total_claims = sum(Number_Of_Deaths),
exp_claims = sum(Policies_Exposed * qx),
.groups = "drop"
) %>%
ungroup()
ggplot(plot_data, aes(x=Attained_Age, y=exp_claims, color=tbl_name, group=tbl_name)) +
geom_line() +
facet_wrap(~ cohort_name, scales="free_y") +
geom_line(
aes(y=total_claims), color="black"
) +
ggtitle("VBT Table (Expected) vs. Actual Claims", "Black line is actuals") +
ylab("Claim Count") +
xlab("Attained Age") +
theme_minimal() +
theme(
legend.position="bottom"
) +
guides(color=guide_legend(title="VBT Table:"))
options(scipen = 999)
rpart_model <- rpart(
as.matrix(model_data.train[,c("Expected_Deaths","Number_Of_Deaths")]) ~
Issue_Age + Issue_Year + Attained_Age + Gender + Preferred_Class +
Smoker_Status + Face_Amount,
data=model_data.train,
method="poisson",
control=rpart.control(cp=0.0001, maxdepth=3))
rpart_model %>%
rpart.plot(digits=3)
plot_data <- model_data.train %>%
mutate(
Face_Group = ifelse(
Face_Amount <= 75000,
"<=75K",
">75K")) %>%
group_by(Issue_Age, Face_Group) %>%
summarise(
Number_Of_Deaths = sum(Number_Of_Deaths),
Expected_Deaths = sum(Expected_Deaths),
`Log A/E` = log(Number_Of_Deaths / Expected_Deaths)
) %>%
filter(Expected_Deaths > 0, Number_Of_Deaths > 0)
ggplot(plot_data, aes(x=Issue_Age, y=`Log A/E`, group=Face_Group, color=Face_Group)) +
geom_point(aes( size=Number_Of_Deaths)) +
geom_smooth(method="loess", aes(weight=Number_Of_Deaths)) +
theme_minimal() +
ggtitle("Issue Age and Face Amount Interaction?",
"Non-parallel lines provide evidence of interacton")
model_wo_interaction <- glm(
Number_Of_Deaths ~ offset(log(Expected_Deaths)) +
splines::ns(Issue_Age, knots=c(60)) + Face_Amount,
data=model_data.train,
family = poisson()
)
model_w_interaction <- glm(
Number_Of_Deaths ~ offset(log(Expected_Deaths)) +
splines::ns(Issue_Age, knots=c(60)) * Face_Amount,
data=model_data.train,
family = poisson()
)
tibble(
`Model Variant` = c("Without Interaction", "With Interaction"),
`AIC` = c(AIC(model_wo_interaction), AIC(model_w_interaction)),
`Better Model (AIC)?` = c(
ifelse(
AIC(model_wo_interaction) < AIC(model_w_interaction),
"Y", "N"),
ifelse(
AIC(model_wo_interaction) > AIC(model_w_interaction),
"Y", "N"))) %>%
kable(caption="Model-based (AIC/BIC) approach to interaction decision") %>%
kable_styling()
plot_data <- model_data.train %>%
group_by(Issue_Age, Face_Amount_Band_2) %>%
summarise(
Number_Of_Deaths = sum(Number_Of_Deaths),
Expected_Deaths = sum(Expected_Deaths),
`Log A/E` = log(Number_Of_Deaths / Expected_Deaths)
) %>%
filter(Expected_Deaths > 0,
Number_Of_Deaths > 0)
ggplot(plot_data, aes(x=Issue_Age, y=`Log A/E`,
group=Face_Amount_Band_2,
color=Face_Amount_Band_2)) +
facet_wrap(~ Face_Amount_Band_2) +
geom_smooth(method="gam", aes(weight=Number_Of_Deaths), se=F) +
theme_minimal() +
ggtitle("Issue Age and Face Amount Interaction?",
"Non-parallel lines provide evidence of interacton")
glm_fit <- glm(
Number_Of_Deaths ~
offset(log(Expected_Deaths)) +
splines::ns(Issue_Age, knots=c(60)) * splines::ns(Face_Amount, knots=c(125000)) +
splines::ns(Attained_Age, knots=c(65)) +
Issue_Age:splines::ns(Issue_Year, knots=c(2002)) +
Preferred_Class * Gender - 1,
data=model_data.train,
family = poisson()
)
summary(glm_fit)
model_data.train["Predicted_Deaths"] <- predict(
glm_fit,
newdata = model_data.train,
type = "response"
)
rpart_model <- rpart(
as.matrix(model_data.train[,c("Predicted_Deaths","Number_Of_Deaths")]) ~
Issue_Age + Issue_Year + Attained_Age + Gender + Preferred_Class +
Smoker_Status + Calendar_Year,
data=model_data.train,
method="poisson",
control=rpart.control(cp=0.0001, maxdepth=3))
rpart_model %>%
rpart.plot(digits=3)
plot_data <- model_data.train %>%
group_by(Calendar_Year) %>%
summarise(
Number_Of_Deaths = sum(Number_Of_Deaths),
Predicted_Deaths = sum(Predicted_Deaths),
`Actual-to-Predicted` = log(Number_Of_Deaths / Predicted_Deaths),
.groups = "drop"
) %>%
rowwise() %>%
mutate(
poi_dev = dpois(Number_Of_Deaths, Predicted_Deaths)
)
ggplot(plot_data, aes(x=Calendar_Year, y=`Actual-to-Predicted`)) +
geom_point() +
geom_smooth(method="loess") +
ylab("Log Actual to Modeled") +
theme_minimal() +
ggtitle("Calendar Year vs. Model")
glmnet_aic <- function(fit) {
tLL <- fit$nulldev - deviance(fit)
k <- fit$df
n <- fit$nobs
-tLL+2*k+2*k*(k+1)/(n-k-1)
}
model_formula <- Number_Of_Deaths ~ splines::ns(Issue_Age, knots=c(60)) * splines::ns(Face_Amount, knots=c(125000)) +
splines::ns(Attained_Age, knots=c(65)) +
Issue_Age:splines::ns(Issue_Year, knots=c(2002)) +
Preferred_Class * Gender - 1
X_mat <- model.matrix(
model_formula,
data=model_data.train
)
glm_fit_2 <- glmnet(
X_mat,
model_data.train$Number_Of_Deaths,
family="poisson",
offset=log(model_data.train$Expected_Deaths),
relax=T,
intercept=F
)
glm_fit_2.aic <- glmnet_aic(glm_fit_2$relaxed)
plot(
1:length(glm_fit_2$lambda),
glm_fit_2.aic,
type="l"
)
best_aic_idx <- min(which(glm_fit_2.aic == min(glm_fit_2.aic)))
keep_model_terms <- glm_fit_2$relaxed$beta[, best_aic_idx]
keep_model_terms <- names(keep_model_terms)[which(abs(keep_model_terms) > 0)]
keep_model_terms
drop_model_terms <- glm_fit_2$relaxed$beta[, best_aic_idx]
drop_model_terms <- names(drop_model_terms)[which(abs(drop_model_terms)== 0)]
drop_model_terms
rpart_model <- rpart(
as.matrix(model_data.train[,c("Predicted_Deaths","Number_Of_Deaths")]) ~
Issue_Year,
data=model_data.train,
method="poisson",
control=rpart.control(cp=0.0001, maxdepth=3))
rpart_model %>%
rpart.plot(digits=3)
model_data.test["Predicted_Deaths"] <- predict(
glm_fit_2$relaxed,
s = glm_fit_2$lambda[best_aic_idx],
newx = model.matrix(
model_formula,
data=model_data.test),
newoffset = log(model_data.test$Expected_Deaths),
type = "response"
)
sum(model_data.test$Number_Of_Deaths) / sum(model_data.test$Predicted_Deaths)
library(recipes)
colnames(model_data.train)
?recipes::bake
?recipes::prep
xgb.receipe <- recipe(~ Calendar_Year + Gender + Preferred_Class + Smoker_Status +
Issue_Age + Attained_Age + Issue_Year + Duration + Face_Amount) %?%
step_dummy(Gender, one_hot = T) %>%
step_dummy(Smoker_Status, one_hot=T) %>%
prep(model_data.train, retain=F)
xgb.receipe <- recipe(~ Calendar_Year + Gender + Preferred_Class + Smoker_Status +
Issue_Age + Attained_Age + Issue_Year + Duration + Face_Amount) %>%
step_dummy(Gender, one_hot = T) %>%
step_dummy(Smoker_Status, one_hot=T) %>%
prep(model_data.train, retain=F)
xgb.receipe <- recipe(~ Calendar_Year + Gender + Preferred_Class + Smoker_Status +
Issue_Age + Attained_Age + Issue_Year + Duration + Face_Amount, model_data.train) %>%
step_dummy(Gender, one_hot = T) %>%
step_dummy(Smoker_Status, one_hot=T) %>%
prep(model_data.train, retain=F)
xgb.receipe <- recipe(~ Calendar_Year + Gender + Preferred_Class +
Issue_Age + Attained_Age + Issue_Year + Duration + Face_Amount, model_data.train) %>%
step_dummy(Gender, one_hot = T) %>%
prep(model_data.train, retain=F)
model_data.train.xgb <- bake(xgb.receipe, model_data.train)
head(model_data.train.xgb)
model_data.train.xgb
str(model_data.train.xgb)
model_data.train.xgb <- bake(xgb.receipe, model_data.train) %>%
as.matrix()
head(model_data.train.xgb)
?step_dummy
xgb.receipe <- recipe(~ Calendar_Year + Gender + Preferred_Class +
Issue_Age + Attained_Age + Issue_Year + Duration + Face_Amount, model_data.train) %>%
step_dummy(Gender, one_hot = F) %>%
prep(model_data.train, retain=F)
model_data.train.xgb <- bake(xgb.receipe, model_data.train) %>%
as.matrix()
xgb_data <- xgboost::xgb.DMatrix(
data = model_data.train.xgb,
label = model_data.train$Number_Of_Deaths,
base_margin = log(model_data.train$Predicted_Deaths)
)
?xgboost::xgboost
