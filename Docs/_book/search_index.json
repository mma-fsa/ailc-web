[["intro.html", "Chapter 2 ILEC Data 2.1 Overview 2.2 Technical Tools: DuckDB", " Chapter 2 ILEC Data 2.1 Overview This chapter introduces the ILEC data, which is an excellent mortality experience dataset provided by the SOA. Since this dataset is fairly large, we’ll use DuckDB. Download and unzip the CSV file on your computer to follow along with this and subsequent chapters. 2.2 Technical Tools: DuckDB Working with large datasets in R can be frustrating. If you encounter frequent crashes, or painfully slow filtering operations, you’ve outgrown the built-in dataframe functionality. This is where DuckDB comes in, it allows you to use the familiar tidyverse coding style, while offloading the actual data processing to a library that can easily handle hundreds of gigabytes. Under the hood it uses columnar storage, making it incredibly fast. Let’s load and summarise the ILEC data using DuckDB. # install DuckDB into your R environment if (!require(&quot;duckdb&quot;)) { install.packages(&quot;duckdb&quot;) library(duckdb) } if (!require(&quot;tidyverse&quot;)) { install.packages(&quot;tidyverse&quot;) library(tidyverse) } if (!require(&quot;knitr&quot;)) { install.packages(&quot;knitr&quot;) library(knitr) } # remove any existing connections, if they exist if (exists(&quot;duckdb_conn&quot;)) { duckdb::duckdb_shutdown(duckdb_conn@driver) duckdb::dbDisconnect(duckdb_conn) rm(duckdb_conn) } # create a connection for duckdb duckdb_conn &lt;- duckdb::dbConnect(duckdb::duckdb(), &quot;:memory:&quot;); # set this to match your system&#39;s available memory suppressMessages({ ignore_result &lt;- DBI::dbExecute(duckdb_conn, &quot;SET memory_limit = &#39;4GB&#39;&quot;) }) # create an R object (that behaves like an ordinary dataframe) # that allows us to work with the large ILEC CSV file. # change the &quot;ILEC_FILEPATH&quot; variable to match the location of # the file on your computer ILEC_CSV_FILEPATH &lt;- &quot;/mnt/data/ilec/ILEC 2009-18 20210528.csv&quot; tbl_ilec_data &lt;- tbl(duckdb_conn, sprintf(&quot;read_csv_auto(&#39;%s&#39;)&quot;, ILEC_CSV_FILEPATH)) # print an exposures and death summary, note that the code is # exactly the same as the standard tidyverse syntax, except for # the call to collect(), which is explain later. tbl_ilec_data %&gt;% group_by(Observation_Year) %&gt;% summarise( `Total Exposures` = sum(Policies_Exposed, na.rm=T), `Total Deaths` = sum(Number_Of_Deaths, na.rm=T) ) %&gt;% collect() %&gt;% kable(caption = &quot;ILEC 2017 Data Summary&quot;) Table 2.1: ILEC 2017 Data Summary Observation_Year Total Exposures Total Deaths 2011 57118520 563694 2009 31322347 249865 2016 57921762 552127 2012 51036427 537286 2010 40190513 412029 2014 57552165 560393 2015 57907852 565853 2018 26188701 360381 2013 57373029 554199 2017 57346148 558579 On my fairly modest computer, summarizing the entire ILEC CSV took less than 10 seconds. Let’s get a better look at the ILEC data by looking at the first 10 rows. column00 Observation_Year Preferred_Indicator Gender Smoker_Status Insurance_Plan Issue_Age Duration Attained_Age Age_Basis Face_Amount_Band Issue_Year Number_Of_Preferred_Classes Preferred_Class SOA_Anticipated_Level_Term_Period SOA_Guaranteed_Level_Term_Period SOA_Post_level_Term_Indicator Select_Ultimate_Indicator Number_Of_Deaths Death_Claim_Amount Policies_Exposed Amount_Exposed Expected_Death_QX7580E_by_Amount Expected_Death_QX2001VBT_by_Amount Expected_Death_QX2008VBT_by_Amount Expected_Death_QX2008VBTLU_by_Amount Expected_Death_QX2015VBT_by_Amount Expected_Death_QX7580E_by_Policy Expected_Death_QX2001VBT_by_Policy Expected_Death_QX2008VBT_by_Policy Expected_Death_QX2008VBTLU_by_Policy Expected_Death_QX2015VBT_by_Policy ExpDeathQx2015VBTwMI_byPol ExpDeathQx2015VBTwMI_byAmt Cen2MomP1wMI_byAmt Cen2MomP2wMI_byAmt Cen3MomP1wMI_byAmt Cen3MomP2wMI_byAmt Cen3MomP3wMI_byAmt Cen2MomP2wMI_byPol Cen3MomP3wMI_byPol Cen2MomP1_byAmt Cen2MomP2_byAmt Cen3MomP1_byAmt Cen3MomP2_byAmt Cen3MomP3_byAmt Cen2MomP2_byPol Cen3MomP3_byPol 1 2009 0 Female NonSmoker Perm 0 1 0 ALB 1-9999 2009 NA NA N/A (Not Term) N/A (Not Term) N/A (Not Term) Select 0 0 1.123288 5616.44 4.71781 1.965754 1.516439 1.516439 1.235617 0.0009436 0.0003932 0.0003033 0.0003033 0.0002471 0.0002580 1.290181 6450.906 1.481871 3.225453e+07 7.409352e+03 1.70204 1.0e-07 0 6178.084 1.359179 3.089042e+07 6.795892e+03 1.495096e+00 1.0e-07 0 2 2009 0 Female NonSmoker Perm 0 1 0 ALB 10000-24999 2008 NA NA N/A (Not Term) N/A (Not Term) N/A (Not Term) Select 0 0 4.882191 52753.42 44.31287 18.463695 14.243422 14.243422 11.605751 0.0041010 0.0017088 0.0013182 0.0013182 0.0010741 0.0011215 12.118256 134729.455 30.949391 1.550498e+09 3.561728e+05 81.81827 3.0e-07 0 129031.480 28.386926 1.484924e+09 3.266833e+05 7.187034e+01 2.0e-07 0 3 2009 0 Female NonSmoker Perm 0 1 0 ALB 50000-99999 2008 NA NA N/A (Not Term) N/A (Not Term) N/A (Not Term) Select 0 0 2.104110 105205.50 88.37262 36.821925 28.405485 28.405485 23.145210 0.0017675 0.0007364 0.0005681 0.0005681 0.0004629 0.0004833 24.167293 1208364.632 277.579610 6.041823e+10 1.387898e+07 3188.21148 1.0e-07 0 1157260.500 254.597310 5.786302e+10 1.272987e+07 2.800570e+03 1.0e-07 0 4 2009 0 Female NonSmoker Perm 0 1 0 ALB 100000-249999 2009 NA NA N/A (Not Term) N/A (Not Term) N/A (Not Term) Select 0 0 24.172601 2540167.03 2133.74030 889.058460 685.845098 685.845098 558.836746 0.0203050 0.0084604 0.0065266 0.0065266 0.0053180 0.0055528 583.514740 63684388.416 14629.266068 7.387604e+12 1.697044e+09 389836.71566 1.3e-06 0 60991049.586 13418.030909 7.075168e+12 1.556537e+09 3.424381e+05 1.2e-06 0 5 2009 0 Female NonSmoker Perm 0 1 0 ALB 250000-499999 2009 NA NA N/A (Not Term) N/A (Not Term) N/A (Not Term) Select 0 0 1.010959 252739.75 212.30139 88.458912 68.239733 68.239733 55.602745 0.0008492 0.0003538 0.0002730 0.0002730 0.0002224 0.0002322 58.058139 14514534.647 3334.207872 3.628634e+12 8.335520e+08 191479.47913 1.0e-07 0 13900686.250 3058.150975 3.475172e+12 7.645377e+08 1.681983e+05 0.0e+00 0 6 2009 0 Female NonSmoker Perm 0 1 0 ANB 1-9999 2008 NA NA N/A (Not Term) N/A (Not Term) N/A (Not Term) Select 0 0 5.468014 27672.81 25.73572 11.345854 8.578572 8.578572 6.918203 0.0050853 0.0022419 0.0016951 0.0016951 0.0013670 0.0014274 7.223708 36605.332 9.555452 1.857568e+08 4.848995e+04 12.65781 4.0e-07 0 35057.220 8.764305 1.779008e+08 4.447520e+04 1.111880e+01 3.0e-07 0 The best part about DuckDB is the syntax is exactly the same as the dplyr (tidyverse), so there is a wealth of resources. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
